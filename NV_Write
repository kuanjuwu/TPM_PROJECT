int nv_max;
char data_to_write[nv_max];
char *data_to_read;

/* Create a NVRAM object */
result = Tspi_Context_CreateObject(hContext, TSS_OBJECT_TYPE_NV, 0, &hNVStore);
if(result!=TSS_SUCCESS) {print_error("Tspi_Context_CreateObject:%x\n",result); exit(result); }

/*Set its arbitrary index to be 0x00011133 */
result = Tspi_SetAttribUint32(hNVStore, TSS_TSPATTRIB_NV_INDEX, 0, 0x0x00011133);
if (result!=TSS_SUCCESS) { print_error("Tspi_SetAttribUint32 index %x\n",result); exit(result); }

/* Set its Attributes, and it is only writeable by the owner */
result = Tspi_SetAttribUint32(hNVStore,TSS_TSPATTRIB_NV_PERMISSIONS, 0, TPM_NV_PER_OWNERWRITE);
if (result!=TSS_SUCCESS) { print_error("Tspi_SetAttribUint32 auth %x\n",result); exit(result); }

/* Next it holds nv_max bytes of data */
result = Tspi_SetAttribUint32(hNVStore, TSS_TSPATTRIB_NV_DATASIZE, 0, nv_max);
if (result!=TSS_SUCCESS) { print_error("Tspi_SetAttribUint32 size%x\n",result); exit(result); }

/* Set Policy for the NVRAM object using the Owner Auth */
result = Tspi_Context_CreateObject(hContext, TSS_OBJECT_TYPE_POLICY, TSS_POLICY_USAGE, &hNewPolicy);
result = Tspi_Policy_SetSecret(hNewPolicy, TSS_SECRET_MODE_PLAIN, auth_lenth, auth);
result = Tspi_Policy_AssignToObject(hNewPolicy,hNVStore);

/* Generate random data from /dev/urandom */
FILE * pFile = fopen("/dev/urandom", "r");
if(pFile == NULL)
  exit(1);
else{
	for( i=0; i<nv_max; i++ )
		data_to_write[i] = fgetc(pFile);
	fclose(pFile);
	}

/* Write to NVRAM */
result = Tspi_NV_WriteValue(hNVStore, 0, nv_max, data_to_write);  
if (result!=TSS_SUCCESS) { print_error("Tspi_NV_WriteValue: %x\n",result); exit(result); }
